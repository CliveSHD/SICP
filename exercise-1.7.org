Exercise 1.7: The =good-enough?= test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing =good-enough?= is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

--- Answer ---

1. 如果是特别小的数（例如 0.0001），猜到 0.32 的时候（平房后为 0.001024），减去 0.0001 后为 0.000924 已经比设定的阈值 0.001 小了。所以这个精度对很小的数来说是远远不够的。
2. 如果是很大的数，超出了计算机的存储限制，那么就无法保证精度（不是很确定这个答案）。
3. 更好的方式：
#+BEGIN_SRC scheme
(define (square x) (* x x))

(define (good-enough? guess next)
  (< (/ (abs (- guess next)) guess) 0.01))

(define (average x y) 
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (sqrt-iter guess x)
  (if (good-enough? guess (improve guess x))
      guess
      (sqrt-iter (improve guess x) x)))
#+END_SRC
